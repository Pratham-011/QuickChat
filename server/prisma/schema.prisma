
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement()) // Corrected 'autoincrement'
  name       String   @db.VarChar(191)
  email      String   @unique @db.VarChar(191)
  provider   String   @db.VarChar(100)
  image      String?
  oauth_id   String
  created_at DateTime @default(now())
  
  chatGroups ChatGroup[]
  @@map("users")
}

model ChatGroup {
  id        String   @id @default(uuid()) @db.Uuid  // UUID String for ChatGroup
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int      // Changed this to match User.id (Int)
  title     String   @db.VarChar(191)
  passcode  String   @db.VarChar(30)
  created_at DateTime @default(now())
  GroupUsers GroupUsers[]
  Chats Chats[]

  @@index([created_at])
  @@map("chat_groups")
}

model GroupUsers {
  id        Int       @id @default(autoincrement()) // Auto-incremented Int
  group     ChatGroup @relation(fields: [group_id], references: [id], onDelete: Cascade)
  group_id  String    @db.Uuid  // UUID String to match ChatGroup.id
  name      String
  created_at DateTime @default(now())
}

model Chats {
  id String @id @default(uuid()) @db.Uuid
  group ChatGroup @relation(fields: [group_id],references: [id] ,onDelete: Cascade)
  group_id String @db.Uuid
  message String?
  name String
  created_at DateTime @default(now())

  @@index([created_at])
  @@map("chats")
}